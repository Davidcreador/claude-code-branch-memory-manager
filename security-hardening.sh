#!/usr/bin/env bash
# Claude Code Branch Memory Manager - Security Hardening Script
# Applies security best practices to existing installation

set -euo pipefail
IFS=$'\n\t'

# Security: Set secure umask
umask 077

# Secure environment
unset LD_PRELOAD LD_LIBRARY_PATH
export PATH="/usr/bin:/bin:/usr/sbin:/sbin"

# Configuration
readonly INSTALL_DIR="$HOME/.claude-memory"
readonly BIN_DIR="$HOME/bin"
readonly GIT_TEMPLATE_DIR="$HOME/.git-templates"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

log_success() {
    echo -e "${GREEN}✓${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

log_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

# Security functions
check_installation() {
    log_info "Checking installation..."
    
    if [[ ! -d "$INSTALL_DIR" ]]; then
        log_error "Claude Memory Manager not found at $INSTALL_DIR"
        return 1
    fi
    
    if [[ ! -f "$BIN_DIR/branch-memory" ]]; then
        log_error "branch-memory command not found"
        return 1
    fi
    
    log_success "Installation found"
    return 0
}

fix_permissions() {
    log_info "Fixing file permissions..."
    
    # Fix installation directory
    if [[ -d "$INSTALL_DIR" ]]; then
        chmod 700 "$INSTALL_DIR"
        log_success "Fixed $INSTALL_DIR permissions (700)"
        
        # Fix subdirectories
        find "$INSTALL_DIR" -type d -exec chmod 700 {} \; 2>/dev/null || true
        log_success "Fixed directory permissions"
        
        # Fix files
        find "$INSTALL_DIR" -type f -exec chmod 600 {} \; 2>/dev/null || true
        log_success "Fixed file permissions"
        
        # Fix executables
        if [[ -d "$INSTALL_DIR/bin" ]]; then
            find "$INSTALL_DIR/bin" -type f -exec chmod 700 {} \; 2>/dev/null || true
        fi
        if [[ -d "$INSTALL_DIR/hooks" ]]; then
            find "$INSTALL_DIR/hooks" -type f -exec chmod 700 {} \; 2>/dev/null || true
        fi
        log_success "Fixed executable permissions"
    fi
    
    # Fix binary
    if [[ -f "$BIN_DIR/branch-memory" ]]; then
        chmod 700 "$BIN_DIR/branch-memory"
        log_success "Fixed branch-memory permissions (700)"
    fi
    
    # Fix git templates
    if [[ -d "$GIT_TEMPLATE_DIR" ]]; then
        chmod 700 "$GIT_TEMPLATE_DIR"
        find "$GIT_TEMPLATE_DIR" -type d -exec chmod 700 {} \; 2>/dev/null || true
        find "$GIT_TEMPLATE_DIR" -type f -exec chmod 600 {} \; 2>/dev/null || true
        find "$GIT_TEMPLATE_DIR/hooks" -type f -exec chmod 700 {} \; 2>/dev/null || true
        log_success "Fixed git template permissions"
    fi
}

remove_world_readable() {
    log_info "Removing world-readable permissions..."
    
    # Find and fix world-readable files
    local count=0
    while IFS= read -r -d '' file; do
        chmod o-r "$file"
        ((count++))
    done < <(find "$INSTALL_DIR" -type f -perm -004 -print0 2>/dev/null || true)
    
    if [[ $count -gt 0 ]]; then
        log_success "Removed world-readable from $count files"
    else
        log_success "No world-readable files found"
    fi
}

check_symlinks() {
    log_info "Checking for symlinks..."
    
    local symlinks_found=0
    
    # Check installation directory
    while IFS= read -r -d '' link; do
        log_warning "Found symlink: $link"
        ((symlinks_found++))
    done < <(find "$INSTALL_DIR" -type l -print0 2>/dev/null || true)
    
    if [[ $symlinks_found -gt 0 ]]; then
        log_warning "Found $symlinks_found symlinks - review for security"
        read -p "Remove all symlinks? (y/N) " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            find "$INSTALL_DIR" -type l -delete 2>/dev/null || true
            log_success "Removed all symlinks"
        fi
    else
        log_success "No symlinks found"
    fi
}

create_security_config() {
    log_info "Creating security configuration..."
    
    local config_dir="$INSTALL_DIR/config"
    mkdir -p "$config_dir"
    chmod 700 "$config_dir"
    
    cat > "$config_dir/security.yml" << 'EOF'
# Claude Memory Manager Security Configuration
# Generated by security-hardening.sh

security:
  # Input validation
  max_branch_length: 255
  max_description_length: 500
  allow_symlinks: false
  
  # File operations
  secure_temp_dir: true
  verify_checksums: true
  atomic_operations: true
  
  # Permissions
  default_umask: "077"
  directory_mode: "700"
  file_mode: "600"
  executable_mode: "700"
  
  # Restrictions
  disable_eval: true
  disable_remote_fetch: false
  require_git_repo: true
  
  # Logging
  log_security_events: true
  log_failed_validations: true
  
# Audit settings
audit:
  enabled: true
  log_file: "~/.claude-memory/logs/security.log"
  rotate_days: 30
  
# Validated patterns (regex)
allowed_patterns:
  branch_names: "^[a-zA-Z0-9._/-]+$"
  file_names: "^[a-zA-Z0-9._-]+$"
  
# Blocked patterns (regex)
blocked_patterns:
  - "\\.\\./"
  - "^/"
  - "^~"
  - "\\x00"
EOF
    
    chmod 600 "$config_dir/security.yml"
    log_success "Created security configuration"
}

audit_current_state() {
    log_info "Performing security audit..."
    
    local issues=0
    
    # Check for weak permissions
    while IFS= read -r -d '' file; do
        log_warning "Weak permissions: $file"
        ((issues++))
    done < <(find "$INSTALL_DIR" -type f \( -perm -022 -o -perm -044 \) -print0 2>/dev/null || true)
    
    # Check for dangerous content
    if grep -r "eval\|exec" "$INSTALL_DIR" --include="*.sh" 2>/dev/null | grep -v "^#" > /dev/null; then
        log_warning "Found eval/exec usage in scripts"
        ((issues++))
    fi
    
    # Check temp file usage
    if grep -r "mktemp\|/tmp" "$INSTALL_DIR" --include="*.sh" 2>/dev/null > /dev/null; then
        log_warning "Found temp file usage - verify secure patterns"
        ((issues++))
    fi
    
    if [[ $issues -eq 0 ]]; then
        log_success "Security audit passed"
    else
        log_warning "Found $issues potential security issues"
    fi
}

apply_git_repo_hardening() {
    log_info "Hardening git repositories..."
    
    # Find all repos with our hooks
    local repos_hardened=0
    
    while IFS= read -r -d '' git_dir; do
        local repo_dir
        repo_dir=$(dirname "$git_dir")
        local repo_name
        repo_name=$(basename "$repo_dir")
        
        # Check if our hooks are installed
        if [[ -f "$git_dir/hooks/post-checkout" ]] && grep -q "Claude" "$git_dir/hooks/post-checkout" 2>/dev/null; then
            # Fix hook permissions
            chmod 700 "$git_dir/hooks/post-checkout" 2>/dev/null || true
            chmod 700 "$git_dir/hooks/pre-commit" 2>/dev/null || true
            
            # Fix memory directory permissions
            if [[ -d "$repo_dir/.claude" ]]; then
                chmod 700 "$repo_dir/.claude" 2>/dev/null || true
                chmod 700 "$repo_dir/.claude/memories" 2>/dev/null || true
                find "$repo_dir/.claude/memories" -type f -exec chmod 600 {} \; 2>/dev/null || true
            fi
            
            ((repos_hardened++))
            log_success "Hardened repository: $repo_name"
        fi
    done < <(find "$HOME" -maxdepth 5 -name ".git" -type d -print0 2>/dev/null || true)
    
    if [[ $repos_hardened -gt 0 ]]; then
        log_success "Hardened $repos_hardened repositories"
    else
        log_info "No repositories found with Claude Memory hooks"
    fi
}

# Main execution
main() {
    echo "Claude Code Branch Memory Manager - Security Hardening"
    echo "======================================================"
    echo ""
    
    # Check installation
    if ! check_installation; then
        log_error "Please install Claude Memory Manager first"
        exit 1
    fi
    
    echo ""
    log_info "Starting security hardening..."
    echo ""
    
    # Apply all security fixes
    fix_permissions
    remove_world_readable
    check_symlinks
    create_security_config
    apply_git_repo_hardening
    audit_current_state
    
    echo ""
    echo "======================================================"
    log_success "Security hardening complete!"
    echo ""
    echo "Recommendations:"
    echo "  • Review the security config at: $INSTALL_DIR/config/security.yml"
    echo "  • Run this script periodically to maintain security"
    echo "  • Report security issues to: https://github.com/Davidcreador/claude-code-branch-memory-manager/security"
    echo ""
}

# Handle arguments
case "${1:-}" in
    --audit-only)
        audit_current_state
        ;;
    --help|-h)
        echo "Usage: $0 [--audit-only]"
        echo ""
        echo "Options:"
        echo "  --audit-only    Only perform security audit without changes"
        echo "  --help          Show this help message"
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac